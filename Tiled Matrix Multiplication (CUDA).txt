#define TILE_WIDTH 32

__global__ void matrixMulTiled(float *A, float *B, float *C, int M, int N, int K) {
    __shared__ float tileA[TILE_WIDTH][TILE_WIDTH];
    __shared__ float tileB[TILE_WIDTH][TILE_WIDTH];
    
    int bx = blockIdx.x, by = blockIdx.y;
    int tx = threadIdx.x, ty = threadIdx.y;
    int row = by * TILE_WIDTH + ty;
    int col = bx * TILE_WIDTH + tx;
    float sum = 0.0f;
    
    for (int m = 0; m < (K - 1) / TILE_WIDTH + 1; ++m) {
        if (row < M && m * TILE_WIDTH + tx < K) {
            tileA[ty][tx] = A[row * K + m * TILE_WIDTH + tx];
        } else {
            tileA[ty][tx] = 0.0f;
        }
        if (col < N && m * TILE_WIDTH + ty < K) {
            tileB[ty][tx] = B[(m * TILE_WIDTH + ty) * N + col];
        } else {
            tileB[ty][tx] = 0.0f;
        }
        __syncthreads();
        
        for (int k = 0; k < TILE_WIDTH; ++k) {
            sum += tileA[ty][k] * tileB[k][tx];
        }
        __syncthreads();
    }
    if (row < M && col < N) {
        C[row * N + col] = sum;
    }
}
